package de.htwg.sa.nmm.persistence.hibernate;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToOne;
import javax.persistence.Table;

import de.htwg.sa.nmm.model.impl.Gamefield;

/**
 * {@link Gamefield} class with Hibernate Annotations
 * 
 * @author Patrick Schmidt
 * @since 2016-04-05
 */
@Entity
@Table(name = "GAME")
public class HibernateGamefield implements Serializable {

	/**
	 * Serial Version ID
	 */
	private static final long serialVersionUID = 6474755332679443051L;

	/**
	 * Autogenerated Id for Hibernate
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id")
	private int id;

	/**
	 * Name of the Game. Needed to identify the game in db4o database
	 */
	@Column(name = "name")
	private String name = "";

	/**
	 * Field matrix to address the specific positions
	 */
	@OneToOne
	@JoinColumn(name = "field")
	private HibernateField[][] gamefield = null;

	/**
	 * Variable to store player1
	 */
	@OneToOne
	@JoinColumn(name = "player_one")
	private HibernatePlayer player1;

	/**
	 * Variable to store player2
	 */
	@OneToOne
	@JoinColumn(name = "player_two")
	private HibernatePlayer player2;

	/**
	 * Variable to store the current player
	 */
	@OneToOne
	@JoinColumn(name = "current_player")
	private HibernatePlayer currentPlayer;

	/**
	 * Default Constructor for Hibernate
	 */
	protected HibernateGamefield() {
		// do nothing just for Hibernate
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public HibernateField[][] getGamefield() {
		return gamefield;
	}

	public void setGamefield(HibernateField[][] gamefield) {
		this.gamefield = gamefield;
	}

	public HibernatePlayer getPlayer1() {
		return player1;
	}

	public void setPlayer1(HibernatePlayer player1) {
		this.player1 = player1;
	}

	public HibernatePlayer getPlayer2() {
		return player2;
	}

	public void setPlayer2(HibernatePlayer player2) {
		this.player2 = player2;
	}

	public HibernatePlayer getCurrentPlayer() {
		return currentPlayer;
	}

	public void setCurrentPlayer(HibernatePlayer currentPlayer) {
		this.currentPlayer = currentPlayer;
	}

}
